// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
let SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let upc = 1;
    const ownerID = accounts[0];
    const originWineryID = accounts[1];
    const originWineryName = "Marques De Riscal";
    const originWineryInformation = "";
    const originWineryLatitude = "-38.239770";
    const originWineryLongitude = "144.341490";
    const wineDesc = "2018, 75cl, Rioja (Spain)";
    const price = web3.utils.toWei("1", "ether");
    const retailerPrice = web3.utils.toWei("1.5", "ether");
    let itemState = 0;
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44



    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Winery: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])


    // 1st Test
    it("Testing smart contract function bottleItem() that allows a winery to bottle wine", async () => {
        const supplyChain = await SupplyChain.deployed();
        await supplyChain.addWinery(originWineryID);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Bottles()
        supplyChain.Bottled((err, _) => {
            eventEmitted = true;
        });

        // Mark an item as Bottled by calling function bottleItem()
        await supplyChain.bottleItem(originWineryID, originWineryName, originWineryInformation, originWineryLatitude, originWineryLongitude, wineDesc, { from: originWineryID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[1], originWineryID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[2], originWineryID, 'Error: Missing or Invalid originWineryID');
        assert.equal(resultBufferOne[3], originWineryName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[4], originWineryInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[5], originWineryLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[6], originWineryLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })

    // 2nd Test
    it("Testing smart contract function sellItem() that allows a winery to sell wine", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event ForSale()
        supplyChain.ForSale((err, _) => {
            eventEmitted = true;
        });


        // Mark an item as Processed by calling function processtItem()
        await supplyChain.sellItem(upc, price, { from: originWineryID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


        // Verify the result set
        assert.equal(resultBufferTwo[4], 1, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[2], price, 'Error: Missing or Invalid Price');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })

    // 3rd Test
    it("Testing smart contract function buyItem() that allows a Distributor to buy wine", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addDistributor(distributorID);
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Packed()
        supplyChain.Sold((err, _) => {
            eventEmitted = true;
        });

        // Mark an item as Packed by calling function packItem()
        await supplyChain.buyItem(upc, { value: price, from: distributorID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[4], 2, 'Error: Invalid item State');
        assert.equal(resultBufferOne[1], distributorID, 'Error: Invalid OwnerId');
        assert.equal(resultBufferTwo[5], distributorID, 'Error: Missing or Invalid DistributorID');
        assert.equal(resultBufferTwo[2], price, 'Error: Missing or Invalid Price');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })

    // 4th Test
    it("Testing smart contract function shipItem() that allows a Distributor to ship Wine", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event ForSale()
        supplyChain.Shipped((err, _) => {
            eventEmitted = true;
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.shipItem(upc, { from: distributorID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


        // Verify the result set
        assert.equal(resultBufferTwo[4], 3, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })

    // 5th Test
    it("Testing smart contract function receiveItem() that allows a Retailer to receive Wine", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addRetailer(retailerID);
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Sold()
        supplyChain.Received((err, _) => {
            eventEmitted = true;
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, { from: retailerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set

        assert.equal(resultBufferTwo[4], 4, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[1], retailerID, 'Error: Invalid OwnerId');
        assert.equal(resultBufferTwo[6], retailerID, 'Error: Missing or Invalid retailerID');
    })

    // 6th Test
    it("Testing smart contract function listForSale() that allows a retailer to sell wine", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Shipped()
        supplyChain.ListedForSale((err, _) => {
            eventEmitted = true;
        })

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.listForSale(upc, retailerPrice, { from: retailerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[4], 5, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[3], retailerPrice, 'Invalid Retailer Price');
    })

    // 7th Test
    it("Testing smart contract function purchaseItem() that allows a Consumer to buy Wine", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Received()
        supplyChain.Purchased((err, _) => {
            eventEmitted = true;
        })

        // Mark an item as Sold by calling function receiveItem()
        await supplyChain.purchaseItem(upc, { value: retailerPrice, from: consumerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[4], 6, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[1], consumerID, 'Error: Invalid OwnerId');
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID');

    })

    // 8th Test
    it("Testing smart contract function open() that allows a consumer to open the Wine bottle", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Purchased()
        supplyChain.Opened((err, _) => {
            eventEmitted = true;
        });

        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.open(upc, { from: consumerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);


        // Verify the result set
        assert.equal(resultBufferTwo[4], 7, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[1], consumerID, 'Error: Invalid OwnerId');

    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set:
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[1], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[2], originWineryID, 'Error: Missing or Invalid originWineryID');
        assert.equal(resultBufferOne[3], originWineryName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[4], originWineryInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[5], originWineryLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[6], originWineryLongitude, 'Error: Missing or Invalid originFarmLongitude');

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set:
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo[1], wineDesc, 'Error: Missing or Invalid Wine Description');
        assert.equal(resultBufferTwo[2], price, 'Error: Missing or Invalid Price');
        assert.equal(resultBufferTwo[3], retailerPrice, 'Error: Missing or Invalid Retailer Price');
        assert.equal(resultBufferTwo[4], 7, 'Error: Invalid Item State');
        assert.equal(resultBufferTwo[5], distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(resultBufferTwo[6], retailerID, 'Error: Missing or Invalid retailerID');
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID');
    })

});

